# This workflow will build and test a Windows Console application built on .NET Core.
#
# Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Application Test Workflow

on:
  push:
    branches:
      - default
  pull_request:
    branches:
      - default
  repository_dispatch:
    types: [assigned] 
  #schedule:
    #- cron: '0 0 * * *' # Runs at 00:00 UTC every day
    # '*/15 * * * *' # example runs every 15 minutes
    # Cron Syntax Quick Reference:
    # * * * * * 
    # | | | | | 
    # | | | | └── Day of the week (0 - 7) (Sunday to Sunday)
    # | | | └──── Month (1 - 12)
    # | | └────── Day of the month (1 - 31)
    # | └──────── Hour (0 - 23)
    # └────────── Minute (0 - 59)

# Manual trigger event - uncomment below to prompt user on manual run
# workflow_dispatch:  
#    inputs:
#      topics:
#        description: 'Topics to apply'
#        required: true
        
jobs:

  setup-assignment:
    runs-on: windows-latest
    steps:
      - name: Set up GitHub CLI
        run: |
          echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token

  check-topic:
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}      
    needs: setup-assignment
    steps:
      - name: Check if topic exists
        id: check_topic
        run: |
          gh api /repos/${{ github.repository }}/topics | grep -q 'netdb-s24-a9-efcoreexample'
          echo "::set-output name=topic_exists::${PIPESTATUS[1]}"

  apply-topic:
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}      
    needs: check-topic
    steps:
      - name: Apply topic if it doesn't exist
        if: steps.check-topic.outputs.topic_exists == '1'
        run: |
            echo '{"names": ["netdb-s24-a9-efcoreexample"]}' > topics.json
            gh api --method PUT /repos/${{ github.repository }}/topics --input topics.json
            del topics.json  # Remove the temporary JSON file
          
  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      ASPNETCORE_ENVIRONMENT: Testing
      Solution_Name: EFCoreExample.sln
      Test_Project_Path: EFCoreExample.Tests\EFCoreExample.Tests.csproj
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
      DOTNET_ADD_GLOBAL_TOOLS_TO_PATH: false
      DOTNET_MULTILEVEL_LOOKUP: 0

    steps:

    # Ensure that your GitHub Actions workflow is using Node.js 20 for compatibility and to remove warnings
    - name: Set up Node.js 20
      uses: actions/setup-node@v2
      with:
        node-version: 20
        
    # This is useful for tasks that require the full project history, such as generating a complete build version number based on the number of commits
    # Fetching the full history can increase the time taken for the checkout step, so it's often omitted unless your specific workflow requires it.
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    # In modern .NET project configurations, it's not strictly necessary to explicitly execute dotnet restore because dotnet build includes an implicit restore step. 
    # However, explicitly calling dotnet restore can be beneficial in continuous integration (CI) environments for clarity, explicit dependency restoration, 
    # or to address specific issues related to dependency resolution. For most scenarios, relying on the implicit restore during the build process is sufficient and simplifies the workflow.
    - name: Restore dependencies
      run: dotnet restore
      
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1.3

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test